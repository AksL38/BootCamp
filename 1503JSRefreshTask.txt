//------------------------------------------
//Generate an API key with given link below https://openweathermap.org/guide Print the current weather data in console- By lat lang 
//--------------------------------------------

// Create new XMLHttpRequest object
let request = new XMLHttpRequest();

//Open a new HTTP connection
request.open('GET', 'https://api.openweathermap.org/data/2.5/weather?lat=19&lon=72&appid=bf6c25bab5eda1c62a09470943ce4c50', true);

//Provide XMLHttpRequest object with callback function that will parse and print received data
request.onload = function() {
      // Access and parse JSON data here
      let data = JSON.parse(this.response);
      console.log(data);
    }

// Send request to server
request.send();

//------------------------------------------------
// Do the below programs in anonymous function & IIFE
//-------------------------------------------------

//-------------------------------------------------
// Problem 1: Print odd numbers in an array
//------------------------------------------------

const oddNums = function (arr) {
    let result = arr.filter(element => {
        return element % 2 !== 0
    });
    console.log(result);
}
oddNums([1, 2, 3, 4, 5, 6, 7, 8]);
//IIFE
(function (arr) {
    let result = arr.filter(element => {
        return element % 2 !== 0
    });
    console.log(result);
})([1, 2, 3, 4, 5, 6, 7, 8]);

//--------------------------------------------
//Problem 2: Convert all the strings to title caps in a string array
//--------------------------------------------
const arrToUpper = function (arr) {
    let result = arr.map(value => {
        return value.toUpperCase();
    })
    return result;
}
console.log(arrToUpper(["abc", "mango", "banana", "ApPlE", "ORANGE"]));
//IIFE
console.log((function (arr) {
    let result = arr.map(value => {
        return value.toUpperCase();
    })
    return result;
})(["abc", "mango", "banana", "ApPlE", "ORANGE"]));

//--------------------------------------------
//Problem 3: Sum of all numbers in an array
//--------------------------------------------

const sumAll = function (arr) {
    return arr.reduce((accum, val) => {
        return accum + val;
    })
}
console.log(sumAll([1, 2, 3, 4, 5, 6, 7, 8]));
//IIFE
let sum = (function (arr) {
    return arr.reduce((accum, val) => {
        return accum + val;
    })
})([1, 2, 3, 4, 5, 6, 7, 8]);
console.log(sum);

//-----------------------------------------
// Problem 4: Return all the prime numbers in an array
//----------------------------------------

const primeArray = function (arr) {
    let result = arr.filter((value) => {
        if (value < 2) {
            return false;
        }
        if (value % 2 === 0 && value !== 2) {
            return false;
        }
        let sqrt = Math.sqrt(value);
        for (let j = 3; j <= sqrt; j = j + 2) {
            if (value % j === 0) {
                return false;
            }
        }
        return true;
    })
    return result;
}
console.log(primeArray([1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 20, 21, 22, 23]));
//IIFE
let primes = (function (arr) {
    let result = arr.filter((value) => {
        if (value < 2) {
            return false;
        }
        if (value % 2 === 0 && value !== 2) {
            return false;
        }
        let sqrt = Math.sqrt(value);
        for (let j = 3; j <= sqrt; j = j + 2) {
            if (value % j === 0) {
                return false;
            }
        }
        return true;
    })
    return result;
})([1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 20, 21, 22, 23]);
console.log(primes);

//--------------------------------------------------
//Problem 5: Return all the palindromes in an array
//-------------------------------------------------
const palinArray = function (arr) {
    let result = arr.filter((value, index, list) => {
        for (j = 0, k = value.length - 1; j <= k; j++, k--) {
            if (value[j] !== value[k]) {
                return false;
            }
        }
        return true;
    })
    return result;
}

console.log(palinArray(["test", "set", "", "abba", "abcdcba", "a", "mango"]));
//IIFE
let palins = (function (arr) {
    let result = arr.filter((value, index, list) => {
        for (j = 0, k = value.length - 1; j <= k; j++, k--) {
            if (value[j] !== value[k]) {
                return false;
            }
        }
        return true;
    })
    return result;
})(["test", "set", "", "abba", "abcdcba", "a", "mango"]);
console.log(palins);

//----------------------------------------------------
//Problem 6: Return median of two sorted arrays of same size
//----------------------------------------------------
let evens = [2, 4, 6, 8, 10];
let odds = [1, 3, 5, 7, 9];

const medianTwo = function (arr1, arr2) {
    // median of two sorted arrays of same size will be
    // avarage of n-1 and nth position of merged array
    let merged = []
    let len = arr1.length

    for (let i = 0, j = 0, k = 0; k <= len; k++) {
        if (i === len) {
            merged.push(arr2[j]);
            j++;
            continue;
        }
        if (j === len) {
            merged.push(arr1[i]);
            i++;
            continue;
        }
        if (arr1[i] < arr2[j]) {
            merged.push(arr1[i]);
            i++;
        }
        else {
            merged.push(arr2[j]);
            j++;
        }
    }

    return (merged[len] + merged[len - 1]) / 2;
}
console.log(medianTwo(evens, odds));
//IIFE
const median = (function (arr1, arr2) {
    // median of two sorted arrays of same size will be
    // avarage of n-1 and nth position of merged array
    let merged = []
    let len = arr1.length

    for (let i = 0, j = 0, k = 0; k <= len; k++) {
        if (i === len) {
            merged.push(arr2[j]);
            j++;
            continue;
        }
        if (j === len) {
            merged.push(arr1[i]);
            i++;
            continue;
        }
        if (arr1[i] < arr2[j]) {
            merged.push(arr1[i]);
            i++;
        }
        else {
            merged.push(arr2[j]);
            j++;
        }
    }

    return (merged[len] + merged[len - 1]) / 2;
})(evens, odds);
console.log(median);

//------------------------------------------
// Problem 7: Remove duplicates from an array
//------------------------------------------

let example = [1, 2, 3, 4, 2, 3, 2, 5, 6, 1, 7, 11, 24, 22, 5, 11];

const unique = function (arr) {
    let result = arr.filter((value, index, values) => {
        return index === values.indexOf(value);
    })
    return result;
}
console.log(unique(example));
//IIFE
let uniques = (function (arr) {
    let result = arr.filter((value, index, values) => {
        return index === values.indexOf(value);
    })
    return result;
})(example);
console.log(uniques);

//------------------------------------------
//Problem 8: Rotate an array by k times and return the rotated array
//------------------------------------------

let example = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

const rotateArr = function (data, shift) {
    // make copy of data
    let arr = data.map(value => value);
    // rotate and return the copy;
    for (let j = 0; j < shift; j++) {
        arr.unshift(arr.pop());
    }
    return arr;
}
console.log(rotateArr(example, 5));
//IIFE
let rotated = (function (data, shift) {
    // make copy of data
    let arr = data.map(value => value);
    // rotate and return the copy;
    for (let j = 0; j < shift; j++) {
        arr.unshift(arr.pop());
    }
    return arr;
})(example, 5);
console.log(rotated);

